{{ if .Values.createNamespace }}
kind: Namespace
apiVersion: v1
metadata:
  name: micro
{{ end }}
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: store-pv
  namespace: "{{ if not .Values.createNamespace }}{{.Release.Namespace}}{{else}}micro{{end}}"
spec:
  claimRef:
    name: store-pvc
    namespace: "{{ if not .Values.createNamespace }}{{.Release.Namespace}}{{else}}micro{{end}}"
  storageClassName: standard
  capacity:
    storage: 3Gi
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: "/data"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: store-pvc
  namespace: "{{ if not .Values.createNamespace }}{{.Release.Namespace}}{{else}}micro{{end}}"
spec:
  storageClassName: standard
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: micro
  namespace: "{{ if not .Values.createNamespace }}{{.Release.Namespace}}{{else}}micro{{end}}"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: micro
  namespace: "{{ if not .Values.createNamespace }}{{.Release.Namespace}}{{else}}micro{{end}}"
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  - services
  - secrets
  - namespaces
  verbs:
  - get
  - create
  - update
  - delete
  - list
  - patch
  - watch
- apiGroups:
  - "apps"
  resources:
  - deployments
  verbs:
  - create
  - update
  - delete
  - list
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  - pods
  - pods/logs
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - "networking.k8s.io"
  resources:
  - networkpolicy
  - networkpolicies
  verbs:
  - get
  - create
  - update
  - delete
  - deletecollection
  - list
  - patch
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: micro
  namespace: "{{ if not .Values.createNamespace }}{{.Release.Namespace}}{{else}}micro{{end}}"
subjects:
- kind: ServiceAccount
  name: micro
  namespace: "{{ if not .Values.createNamespace }}{{.Release.Namespace}}{{else}}micro{{end}}"
roleRef:
  kind: ClusterRole
  name: micro
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: micro
  namespace: "{{ if not .Values.createNamespace }}{{.Release.Namespace}}{{else}}micro{{end}}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: micro
subjects:
- kind: ServiceAccount
  name: micro
---
apiVersion: batch/v1
kind: Job
metadata:
  name: micro
  namespace: "{{ if not .Values.createNamespace }}{{.Release.Namespace}}{{else}}micro{{end}}"
spec:
  template:
    spec:
      serviceAccountName: micro
      containers:
      - name: micro
        env:
        - name: MICRO_PROFILE
          value: kubernetes
        - name: MICRO_PROXY
          value: "network.micro.svc.cluster.local:8443"
        - name: MICRO_SERVER_IMAGE
          value: "{{ .Values.image.repo }}:{{ .Values.image.tag }}"
        args:
        - server
        image: "{{ .Values.image.repo }}:{{ .Values.image.tag }}"
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: "/store"
          name: store-mount
      volumes: 
      - name: store-mount
        persistentVolumeClaim:
          claimName: store-pvc
      restartPolicy: OnFailure